// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.1
// source: airSale.proto

package v1

import (
	context "context"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date                 *timestamp.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	DepartureAirportCode string               `protobuf:"bytes,2,opt,name=departureAirportCode,proto3" json:"departureAirportCode,omitempty"`
	ArrivalAirport       string               `protobuf:"bytes,3,opt,name=arrivalAirport,proto3" json:"arrivalAirport,omitempty"`
}

func (x *TicketRequest) Reset() {
	*x = TicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_airSale_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketRequest) ProtoMessage() {}

func (x *TicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_airSale_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketRequest.ProtoReflect.Descriptor instead.
func (*TicketRequest) Descriptor() ([]byte, []int) {
	return file_airSale_proto_rawDescGZIP(), []int{0}
}

func (x *TicketRequest) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *TicketRequest) GetDepartureAirportCode() string {
	if x != nil {
		return x.DepartureAirportCode
	}
	return ""
}

func (x *TicketRequest) GetArrivalAirport() string {
	if x != nil {
		return x.ArrivalAirport
	}
	return ""
}

type ProperFlightTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DepartureTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=departureTime,proto3" json:"departureTime,omitempty"`
	FlyingTime    *duration.Duration   `protobuf:"bytes,3,opt,name=flyingTime,proto3" json:"flyingTime,omitempty"`
	TicketCost    float64              `protobuf:"fixed64,4,opt,name=ticketCost,proto3" json:"ticketCost,omitempty"`
}

func (x *ProperFlightTicket) Reset() {
	*x = ProperFlightTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_airSale_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProperFlightTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProperFlightTicket) ProtoMessage() {}

func (x *ProperFlightTicket) ProtoReflect() protoreflect.Message {
	mi := &file_airSale_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProperFlightTicket.ProtoReflect.Descriptor instead.
func (*ProperFlightTicket) Descriptor() ([]byte, []int) {
	return file_airSale_proto_rawDescGZIP(), []int{1}
}

func (x *ProperFlightTicket) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProperFlightTicket) GetDepartureTime() *timestamp.Timestamp {
	if x != nil {
		return x.DepartureTime
	}
	return nil
}

func (x *ProperFlightTicket) GetFlyingTime() *duration.Duration {
	if x != nil {
		return x.FlyingTime
	}
	return nil
}

func (x *ProperFlightTicket) GetTicketCost() float64 {
	if x != nil {
		return x.TicketCost
	}
	return 0
}

var File_airSale_proto protoreflect.FileDescriptor

var file_airSale_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x61, 0x69, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x15, 0x61, 0x69, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x61, 0x69, 0x72, 0x53,
	0x61, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x01, 0x0a, 0x0d, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x69,
	0x72, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xc1, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0d,
	0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x66, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x66,
	0x6c, 0x79, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x32, 0x7a, 0x0a, 0x11, 0x41, 0x69, 0x72,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x65,
	0x0a, 0x10, 0x41, 0x69, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x24, 0x2e, 0x61, 0x69, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e,
	0x61, 0x69, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x69, 0x72, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x61, 0x69, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x30, 0x01, 0x42, 0x1d, 0x5a, 0x1b, 0x61, 0x69, 0x72, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x69, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_airSale_proto_rawDescOnce sync.Once
	file_airSale_proto_rawDescData = file_airSale_proto_rawDesc
)

func file_airSale_proto_rawDescGZIP() []byte {
	file_airSale_proto_rawDescOnce.Do(func() {
		file_airSale_proto_rawDescData = protoimpl.X.CompressGZIP(file_airSale_proto_rawDescData)
	})
	return file_airSale_proto_rawDescData
}

var file_airSale_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_airSale_proto_goTypes = []interface{}{
	(*TicketRequest)(nil),       // 0: airTickets.airSale.v1.TicketRequest
	(*ProperFlightTicket)(nil),  // 1: airTickets.airSale.v1.ProperFlightTicket
	(*timestamp.Timestamp)(nil), // 2: google.protobuf.Timestamp
	(*duration.Duration)(nil),   // 3: google.protobuf.Duration
}
var file_airSale_proto_depIdxs = []int32{
	2, // 0: airTickets.airSale.v1.TicketRequest.date:type_name -> google.protobuf.Timestamp
	2, // 1: airTickets.airSale.v1.ProperFlightTicket.departureTime:type_name -> google.protobuf.Timestamp
	3, // 2: airTickets.airSale.v1.ProperFlightTicket.flyingTime:type_name -> google.protobuf.Duration
	0, // 3: airTickets.airSale.v1.AirTicketsService.AirTicketsFinder:input_type -> airTickets.airSale.v1.TicketRequest
	1, // 4: airTickets.airSale.v1.AirTicketsService.AirTicketsFinder:output_type -> airTickets.airSale.v1.ProperFlightTicket
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_airSale_proto_init() }
func file_airSale_proto_init() {
	if File_airSale_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_airSale_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_airSale_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProperFlightTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_airSale_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_airSale_proto_goTypes,
		DependencyIndexes: file_airSale_proto_depIdxs,
		MessageInfos:      file_airSale_proto_msgTypes,
	}.Build()
	File_airSale_proto = out.File
	file_airSale_proto_rawDesc = nil
	file_airSale_proto_goTypes = nil
	file_airSale_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AirTicketsServiceClient is the client API for AirTicketsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AirTicketsServiceClient interface {
	AirTicketsFinder(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (AirTicketsService_AirTicketsFinderClient, error)
}

type airTicketsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAirTicketsServiceClient(cc grpc.ClientConnInterface) AirTicketsServiceClient {
	return &airTicketsServiceClient{cc}
}

func (c *airTicketsServiceClient) AirTicketsFinder(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (AirTicketsService_AirTicketsFinderClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AirTicketsService_serviceDesc.Streams[0], "/airTickets.airSale.v1.AirTicketsService/AirTicketsFinder", opts...)
	if err != nil {
		return nil, err
	}
	x := &airTicketsServiceAirTicketsFinderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AirTicketsService_AirTicketsFinderClient interface {
	Recv() (*ProperFlightTicket, error)
	grpc.ClientStream
}

type airTicketsServiceAirTicketsFinderClient struct {
	grpc.ClientStream
}

func (x *airTicketsServiceAirTicketsFinderClient) Recv() (*ProperFlightTicket, error) {
	m := new(ProperFlightTicket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AirTicketsServiceServer is the server API for AirTicketsService service.
type AirTicketsServiceServer interface {
	AirTicketsFinder(*TicketRequest, AirTicketsService_AirTicketsFinderServer) error
}

// UnimplementedAirTicketsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAirTicketsServiceServer struct {
}

func (*UnimplementedAirTicketsServiceServer) AirTicketsFinder(*TicketRequest, AirTicketsService_AirTicketsFinderServer) error {
	return status.Errorf(codes.Unimplemented, "method AirTicketsFinder not implemented")
}

func RegisterAirTicketsServiceServer(s *grpc.Server, srv AirTicketsServiceServer) {
	s.RegisterService(&_AirTicketsService_serviceDesc, srv)
}

func _AirTicketsService_AirTicketsFinder_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TicketRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AirTicketsServiceServer).AirTicketsFinder(m, &airTicketsServiceAirTicketsFinderServer{stream})
}

type AirTicketsService_AirTicketsFinderServer interface {
	Send(*ProperFlightTicket) error
	grpc.ServerStream
}

type airTicketsServiceAirTicketsFinderServer struct {
	grpc.ServerStream
}

func (x *airTicketsServiceAirTicketsFinderServer) Send(m *ProperFlightTicket) error {
	return x.ServerStream.SendMsg(m)
}

var _AirTicketsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "airTickets.airSale.v1.AirTicketsService",
	HandlerType: (*AirTicketsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AirTicketsFinder",
			Handler:       _AirTicketsService_AirTicketsFinder_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "airSale.proto",
}
