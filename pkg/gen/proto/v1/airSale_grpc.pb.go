// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: airSale.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AirTicketsServiceClient is the client API for AirTicketsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AirTicketsServiceClient interface {
	AirTicketsFinder(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (AirTicketsService_AirTicketsFinderClient, error)
}

type airTicketsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAirTicketsServiceClient(cc grpc.ClientConnInterface) AirTicketsServiceClient {
	return &airTicketsServiceClient{cc}
}

func (c *airTicketsServiceClient) AirTicketsFinder(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (AirTicketsService_AirTicketsFinderClient, error) {
	stream, err := c.cc.NewStream(ctx, &AirTicketsService_ServiceDesc.Streams[0], "/airTickets.airSale.v1.AirTicketsService/AirTicketsFinder", opts...)
	if err != nil {
		return nil, err
	}
	x := &airTicketsServiceAirTicketsFinderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AirTicketsService_AirTicketsFinderClient interface {
	Recv() (*ProperFlightTicket, error)
	grpc.ClientStream
}

type airTicketsServiceAirTicketsFinderClient struct {
	grpc.ClientStream
}

func (x *airTicketsServiceAirTicketsFinderClient) Recv() (*ProperFlightTicket, error) {
	m := new(ProperFlightTicket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AirTicketsServiceServer is the server API for AirTicketsService service.
// All implementations must embed UnimplementedAirTicketsServiceServer
// for forward compatibility
type AirTicketsServiceServer interface {
	AirTicketsFinder(*TicketRequest, AirTicketsService_AirTicketsFinderServer) error
	mustEmbedUnimplementedAirTicketsServiceServer()
}

// UnimplementedAirTicketsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAirTicketsServiceServer struct {
}

func (UnimplementedAirTicketsServiceServer) AirTicketsFinder(*TicketRequest, AirTicketsService_AirTicketsFinderServer) error {
	return status.Errorf(codes.Unimplemented, "method AirTicketsFinder not implemented")
}
func (UnimplementedAirTicketsServiceServer) mustEmbedUnimplementedAirTicketsServiceServer() {}

// UnsafeAirTicketsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AirTicketsServiceServer will
// result in compilation errors.
type UnsafeAirTicketsServiceServer interface {
	mustEmbedUnimplementedAirTicketsServiceServer()
}

func RegisterAirTicketsServiceServer(s grpc.ServiceRegistrar, srv AirTicketsServiceServer) {
	s.RegisterService(&AirTicketsService_ServiceDesc, srv)
}

func _AirTicketsService_AirTicketsFinder_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TicketRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AirTicketsServiceServer).AirTicketsFinder(m, &airTicketsServiceAirTicketsFinderServer{stream})
}

type AirTicketsService_AirTicketsFinderServer interface {
	Send(*ProperFlightTicket) error
	grpc.ServerStream
}

type airTicketsServiceAirTicketsFinderServer struct {
	grpc.ServerStream
}

func (x *airTicketsServiceAirTicketsFinderServer) Send(m *ProperFlightTicket) error {
	return x.ServerStream.SendMsg(m)
}

// AirTicketsService_ServiceDesc is the grpc.ServiceDesc for AirTicketsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AirTicketsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "airTickets.airSale.v1.AirTicketsService",
	HandlerType: (*AirTicketsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AirTicketsFinder",
			Handler:       _AirTicketsService_AirTicketsFinder_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "airSale.proto",
}
