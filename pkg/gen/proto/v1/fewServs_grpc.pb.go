// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: fewServs.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MainClient is the client API for Main service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MainClient interface {
	UserRespHanger(ctx context.Context, in *UserMsg, opts ...grpc.CallOption) (*SystemMsg, error)
}

type mainClient struct {
	cc grpc.ClientConnInterface
}

func NewMainClient(cc grpc.ClientConnInterface) MainClient {
	return &mainClient{cc}
}

func (c *mainClient) UserRespHanger(ctx context.Context, in *UserMsg, opts ...grpc.CallOption) (*SystemMsg, error) {
	out := new(SystemMsg)
	err := c.cc.Invoke(ctx, "/fewServs.Main/UserRespHanger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MainServer is the server API for Main service.
// All implementations must embed UnimplementedMainServer
// for forward compatibility
type MainServer interface {
	UserRespHanger(context.Context, *UserMsg) (*SystemMsg, error)
	mustEmbedUnimplementedMainServer()
}

// UnimplementedMainServer must be embedded to have forward compatible implementations.
type UnimplementedMainServer struct {
}

func (UnimplementedMainServer) UserRespHanger(context.Context, *UserMsg) (*SystemMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRespHanger not implemented")
}
func (UnimplementedMainServer) mustEmbedUnimplementedMainServer() {}

// UnsafeMainServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MainServer will
// result in compilation errors.
type UnsafeMainServer interface {
	mustEmbedUnimplementedMainServer()
}

func RegisterMainServer(s grpc.ServiceRegistrar, srv MainServer) {
	s.RegisterService(&Main_ServiceDesc, srv)
}

func _Main_UserRespHanger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServer).UserRespHanger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fewServs.Main/UserRespHanger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServer).UserRespHanger(ctx, req.(*UserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// Main_ServiceDesc is the grpc.ServiceDesc for Main service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Main_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fewServs.Main",
	HandlerType: (*MainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserRespHanger",
			Handler:    _Main_UserRespHanger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fewServs.proto",
}

// MinorClient is the client API for Minor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MinorClient interface {
	MainRespHanger(ctx context.Context, in *UserMsg, opts ...grpc.CallOption) (*SystemMsg, error)
}

type minorClient struct {
	cc grpc.ClientConnInterface
}

func NewMinorClient(cc grpc.ClientConnInterface) MinorClient {
	return &minorClient{cc}
}

func (c *minorClient) MainRespHanger(ctx context.Context, in *UserMsg, opts ...grpc.CallOption) (*SystemMsg, error) {
	out := new(SystemMsg)
	err := c.cc.Invoke(ctx, "/fewServs.Minor/MainRespHanger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MinorServer is the server API for Minor service.
// All implementations must embed UnimplementedMinorServer
// for forward compatibility
type MinorServer interface {
	MainRespHanger(context.Context, *UserMsg) (*SystemMsg, error)
	mustEmbedUnimplementedMinorServer()
}

// UnimplementedMinorServer must be embedded to have forward compatible implementations.
type UnimplementedMinorServer struct {
}

func (UnimplementedMinorServer) MainRespHanger(context.Context, *UserMsg) (*SystemMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MainRespHanger not implemented")
}
func (UnimplementedMinorServer) mustEmbedUnimplementedMinorServer() {}

// UnsafeMinorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MinorServer will
// result in compilation errors.
type UnsafeMinorServer interface {
	mustEmbedUnimplementedMinorServer()
}

func RegisterMinorServer(s grpc.ServiceRegistrar, srv MinorServer) {
	s.RegisterService(&Minor_ServiceDesc, srv)
}

func _Minor_MainRespHanger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinorServer).MainRespHanger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fewServs.Minor/MainRespHanger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinorServer).MainRespHanger(ctx, req.(*UserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// Minor_ServiceDesc is the grpc.ServiceDesc for Minor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Minor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fewServs.Minor",
	HandlerType: (*MinorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MainRespHanger",
			Handler:    _Minor_MainRespHanger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fewServs.proto",
}
