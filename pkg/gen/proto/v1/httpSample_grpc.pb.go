// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: httpSample.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HttpSampleClient is the client API for HttpSample service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HttpSampleClient interface {
	StringResp(ctx context.Context, in *SimpleMsg, opts ...grpc.CallOption) (*SimpleMsg, error)
	StringGetReq(ctx context.Context, in *Id, opts ...grpc.CallOption) (*SimpleMsgWithID, error)
}

type httpSampleClient struct {
	cc grpc.ClientConnInterface
}

func NewHttpSampleClient(cc grpc.ClientConnInterface) HttpSampleClient {
	return &httpSampleClient{cc}
}

func (c *httpSampleClient) StringResp(ctx context.Context, in *SimpleMsg, opts ...grpc.CallOption) (*SimpleMsg, error) {
	out := new(SimpleMsg)
	err := c.cc.Invoke(ctx, "/airTickets.httpSample.v1.HttpSample/StringResp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpSampleClient) StringGetReq(ctx context.Context, in *Id, opts ...grpc.CallOption) (*SimpleMsgWithID, error) {
	out := new(SimpleMsgWithID)
	err := c.cc.Invoke(ctx, "/airTickets.httpSample.v1.HttpSample/StringGetReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HttpSampleServer is the server API for HttpSample service.
// All implementations must embed UnimplementedHttpSampleServer
// for forward compatibility
type HttpSampleServer interface {
	StringResp(context.Context, *SimpleMsg) (*SimpleMsg, error)
	StringGetReq(context.Context, *Id) (*SimpleMsgWithID, error)
	mustEmbedUnimplementedHttpSampleServer()
}

// UnimplementedHttpSampleServer must be embedded to have forward compatible implementations.
type UnimplementedHttpSampleServer struct {
}

func (UnimplementedHttpSampleServer) StringResp(context.Context, *SimpleMsg) (*SimpleMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StringResp not implemented")
}
func (UnimplementedHttpSampleServer) StringGetReq(context.Context, *Id) (*SimpleMsgWithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StringGetReq not implemented")
}
func (UnimplementedHttpSampleServer) mustEmbedUnimplementedHttpSampleServer() {}

// UnsafeHttpSampleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HttpSampleServer will
// result in compilation errors.
type UnsafeHttpSampleServer interface {
	mustEmbedUnimplementedHttpSampleServer()
}

func RegisterHttpSampleServer(s grpc.ServiceRegistrar, srv HttpSampleServer) {
	s.RegisterService(&HttpSample_ServiceDesc, srv)
}

func _HttpSample_StringResp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpSampleServer).StringResp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airTickets.httpSample.v1.HttpSample/StringResp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpSampleServer).StringResp(ctx, req.(*SimpleMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpSample_StringGetReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpSampleServer).StringGetReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airTickets.httpSample.v1.HttpSample/StringGetReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpSampleServer).StringGetReq(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// HttpSample_ServiceDesc is the grpc.ServiceDesc for HttpSample service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HttpSample_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "airTickets.httpSample.v1.HttpSample",
	HandlerType: (*HttpSampleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StringResp",
			Handler:    _HttpSample_StringResp_Handler,
		},
		{
			MethodName: "StringGetReq",
			Handler:    _HttpSample_StringGetReq_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "httpSample.proto",
}
